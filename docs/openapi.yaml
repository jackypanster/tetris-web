openapi: 3.0.3
info:
  title: Tetris Web Highscore API
  version: 0.1.0
  description: >-
    FastAPI service that stores short-lived Tetris high scores. Clients may run
    offline and resynchronise; rate limiting and input validation protect the
    shared leaderboard.
servers:
  - url: https://api.example.com
    description: Placeholder production endpoint
  - url: http://localhost:8000
    description: Local development via `uv run fastapi dev --reload`
tags:
  - name: Scores
    description: Submit and query high score entries
paths:
  /scores:
    get:
      tags: [Scores]
      summary: List top scores
      description: Return the most recent high score entries ordered by points
        descending then createdAt descending.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Maximum number of records to return.
      responses:
        '200':
          description: A window of leaderboard entries.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreList'
        '429':
          description: Too many requests; caller should back off.
    post:
      tags: [Scores]
      summary: Submit a score
      description: Store a new score for a nickname; duplicate submissions should
        be handled client-side.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScoreInput'
      responses:
        '201':
          description: Score accepted and stored.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Score'
        '400':
          description: Invalid payload (nickname, points, or client metadata).
        '429':
          description: Too many requests; caller should back off.
components:
  schemas:
    ScoreList:
      type: object
      required: [items, generatedAt]
      properties:
        generatedAt:
          type: string
          format: date-time
        items:
          type: array
          items:
            $ref: '#/components/schemas/Score'
    Score:
      type: object
      required: [id, nickname, points, createdAt, client]
      properties:
        id:
          type: string
          description: Server-generated identifier.
        nickname:
          type: string
          minLength: 1
          maxLength: 16
        points:
          type: integer
          minimum: 0
        createdAt:
          type: string
          format: date-time
        client:
          $ref: '#/components/schemas/ClientInfo'
    ScoreInput:
      type: object
      required: [nickname, points]
      properties:
        nickname:
          type: string
          minLength: 1
          maxLength: 16
        points:
          type: integer
          minimum: 0
        client:
          $ref: '#/components/schemas/ClientInfo'
      additionalProperties: false
    ClientInfo:
      type: object
      properties:
        version:
          type: string
          description: Short client build identifier.
        ua:
          type: string
          maxLength: 128
          description: Normalised user-agent or device info.
      additionalProperties: false

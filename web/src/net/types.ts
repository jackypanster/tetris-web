/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/scores": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List leaderboard scores
         * @description Return the most recent high score entries ordered by points descending then creation time descending. Supports cursor-based pagination and optional freshness filters. Results are capped by the requested limit or the server-side retention policy (default 14 days / Top-100).
         */
        get: operations["listScores"];
        put?: never;
        /**
         * Submit a single score
         * @description Store a new score for a nickname. Clients should deduplicate submissions locally. The server may flag suspicious records and omit them from ranking.
         */
        post: operations["submitScore"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/scores/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit multiple scores
         * @description Upload up to 50 queued scores in one request. Each item is validated independently; the response details successes and failures.
         */
        post: operations["submitScoresBulk"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ScoreWindow: {
            /**
             * Format: date-time
             * @description Timestamp when the snapshot was generated.
             */
            generatedAt: string;
            retention: {
                /** @description Days of history the server keeps. */
                days: number;
                /** @description Maximum number of records kept for the window. */
                maxRecords: number;
            };
            /** @description Cursor to request the next page; null when no more data. */
            nextCursor?: string | null;
            /** @description Ordered list of scores. */
            items: components["schemas"]["Score"][];
        };
        Score: {
            /** @description Server-generated identifier. */
            id: string;
            /** @description Display name submitted by the player. */
            nickname: string;
            /** @description Final score achieved at game over. */
            points: number;
            /** @description Lines cleared in the run. */
            lines: number;
            /** @description Last level reached during the run. */
            levelReached: number;
            /** @description Total run duration in seconds. */
            durationSeconds: number;
            /** @description Optional seed used by the Bag RNG. */
            seed?: string | null;
            /**
             * Format: date-time
             * @description Time when the server accepted the score.
             */
            createdAt: string;
            /**
             * @description Flag indicating the score is withheld from ranking pending review.
             * @default false
             */
            suspect: boolean;
            client?: components["schemas"]["ClientInfo"];
            /** @description Optional metadata labels provided by the client. */
            tags?: string[];
        };
        ScoreInput: {
            /** @description Display name to associate with the score. */
            nickname: string;
            /** @description Total points acquired during gameplay. */
            points: number;
            /** @description Lines cleared in the run. */
            lines?: number;
            /** @description Last level reached during the run. */
            levelReached?: number;
            /** @description Run duration in seconds. */
            durationSeconds?: number;
            /** @description Optional seed used by the client. */
            seed?: string;
            /** @description Optional metadata labels (e.g., "daily-challenge"). */
            tags?: string[];
            client?: components["schemas"]["ClientInfo"];
        };
        ScoreBatchInput: {
            /**
             * Format: date-time
             * @description Timestamp when the batch was generated on the client.
             */
            clientTime?: string;
            /** @description Scores queued locally awaiting upload. */
            items: components["schemas"]["ScoreInput"][];
        };
        ScoreBatchResult: {
            /** @description Scores that were stored successfully. */
            accepted: components["schemas"]["Score"][];
            /** @description Scores that failed validation or business rules. */
            rejected: components["schemas"]["ScoreRejection"][];
        };
        ScoreRejection: {
            /** @description Error code explaining why the item failed. */
            reason: string;
            payload: components["schemas"]["ScoreInput"];
        };
        ClientInfo: {
            /** @description Client build identifier (semver or hash). */
            version?: string;
            /** @description Simplified device/platform identifier. */
            platform?: string;
            /** @description Normalised user-agent or device info. */
            ua?: string;
        };
        ErrorResponse: {
            /** @description Machine-readable error code. */
            code?: string;
            /** @description Message describing the error condition. */
            detail: string | components["schemas"]["ValidationError"];
        };
        ValidationError: {
            /** @description Path to the field that caused the error. */
            loc: (string | number)[];
            msg: string;
            type: string;
        };
        HTTPValidationError: {
            detail?: components["schemas"]["ValidationError"][];
        };
    };
    responses: {
        /** @description Too many requests; caller should back off before retrying. */
        TooManyRequests: {
            headers: {
                /** @description Seconds until the rate limit resets. */
                "Retry-After"?: number;
                "X-RateLimit-Limit"?: number;
                "X-RateLimit-Remaining"?: number;
                "X-RateLimit-Reset"?: number;
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Unexpected server failure while processing the request. */
        ServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Invalid payload or query parameter. */
        ValidationError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["HTTPValidationError"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listScores: {
        parameters: {
            query?: {
                /** @description Maximum number of records to return. */
                limit?: number;
                /** @description Pagination cursor from a previous response. */
                cursor?: string;
                /** @description Return scores created at or after this timestamp. */
                since?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A window of leaderboard entries. */
            200: {
                headers: {
                    /** @description Maximum allowed requests per minute. */
                    "X-RateLimit-Limit"?: number;
                    /** @description Remaining requests in the current window. */
                    "X-RateLimit-Remaining"?: number;
                    /** @description Unix epoch seconds until the window resets. */
                    "X-RateLimit-Reset"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScoreWindow"];
                };
            };
            422: components["responses"]["ValidationError"];
            429: components["responses"]["TooManyRequests"];
            500: components["responses"]["ServerError"];
        };
    };
    submitScore: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScoreInput"];
            };
        };
        responses: {
            /** @description Score accepted and stored. */
            201: {
                headers: {
                    /** @description Seconds until another submission is allowed (set when throttled). */
                    "Retry-After"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Score"];
                };
            };
            /** @description Score stored but flagged for review (suspect). */
            207: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Score"];
                };
            };
            /** @description Business rule violated (e.g., nickname banned, invalid timing). */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            422: components["responses"]["ValidationError"];
            429: components["responses"]["TooManyRequests"];
            500: components["responses"]["ServerError"];
        };
    };
    submitScoresBulk: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScoreBatchInput"];
            };
        };
        responses: {
            /** @description Partial success with per-item status. */
            207: {
                headers: {
                    /** @description Seconds until the queue may retry (set when throttled). */
                    "Retry-After"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScoreBatchResult"];
                };
            };
            /** @description Payload too large or item count exceeded. */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            422: components["responses"]["ValidationError"];
            429: components["responses"]["TooManyRequests"];
            500: components["responses"]["ServerError"];
        };
    };
}
